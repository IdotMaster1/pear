#+TITLE: The Pear Game Engine Documentation
#+AUTHOR: Abb1x
Welcome to the Pear game engine documentation! Pear is a simple, 2d game engine written in C++!
* Renderer functions
** Renderer::createWindow()
   #+begin_src c++
   void Renderer::createWindow(const char* title,int w, int h)
   #+end_src
   Creates an SDL Window
** Renderer::createRenderer()
   #+begin_src c++
   void Renderer::createRenderer()
   #+end_src
   Creates a new renderer, must be called before rendering operations
** Renderer::setClearColor()
   #+begin_src c++
   void Renderer::setClearColor(int r,int g, int b, int a)
   #+end_src
   Sets the window's background color
   
** Renderer::clearRenderer()
   #+begin_src c++
   void Renderer::clearRenderer()
   #+end_src
   Clears the renderer
** Renderer::renderPresent()
   #+begin_src c++
   void Renderer::renderPresent()
   #+end_src
   Updates the renderer, to display the newly rendered entities (combined with clearRenderer())
** Renderer::getRefreshRate()
   #+begin_src c++
   int Renderer::getRefreshRate()
   #+end_src
   Returns the screen's refresh rate
** Renderer::destroyRenderer()
   #+begin_src c++
   void Renderer::destroyRenderer()
   #+end_src
   Destroys the Renderer, must be called at the end of the program
** Renderer::loadTexture()
   #+begin_src c++
   SDL_Texture* Renderer::loadTexture(const char* path)
   #+end_src
   Returns a texture from an image file
** Renderer::loadTextureFromFont()
   #+begin_src c++
   SDL_Texture* Renderer::loadTextureFromFont(SDL_Color color,const char* text,[const char* path,int size])
   #+end_src
   Returns a texture from a font with a defined text (arguments in [] are optional)
**  Renderer::renderEntity()
   #+begin_src c++
   void Renderer::renderEntity(Entity& entity,[double angle, float scale])
   #+end_src
   Renders an entity on the screen
* Engine functions
** Engine::sleep()
   #+begin_src c++
   void Engine::sleep(int duration)
   #+end_src
   Pauses the engine for a time given in seconds
** Engine::init()
   #+begin_src c++
   void Engine::init()
   #+end_src
   Initializes the engine, must be called at the start of the program
** Engine::handleEvents()
   #+begin_src c++
   void Engine::handleEvents()
   #+end_src
   Handles the proper events (keyboard input,buttons,...), this function is called in the game loop

** Engine::loop()
   #+begin_src c++
   void Engine::loop(Renderer& renderer)
   #+end_src
   The main game loop, must be called somewhere in the program
** Engine::process()
   #+begin_src c++
   void Engine::process()
   #+end_src
   This function is not defined and called each frame, must be defined somewhere in the program else the compiler will give an error
** Engine::quit()
   #+begin_src c++
   void Engine::quit()
   #+end_src
   Must be called at the end of the program
